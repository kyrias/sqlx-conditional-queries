---
source: core/src/snapshot_tests.rs
expression: prettyprint(output)
snapshot_kind: text
---
fn dummy() {
    {
        enum ConditionalMap<'q, DB: ::sqlx::Database, A, F0, F1> {
            Variant0(::sqlx::query::Map<'q, DB, F0, A>),
            Variant1(::sqlx::query::Map<'q, DB, F1, A>),
        }
        impl<'q, DB, A, O, F0, F1> ConditionalMap<'q, DB, A, F0, F1>
        where
            DB: ::sqlx::Database,
            A: 'q + ::sqlx::IntoArguments<'q, DB> + ::std::marker::Send,
            O: ::std::marker::Unpin + ::std::marker::Send,
            F0: ::std::ops::FnMut(DB::Row) -> ::sqlx::Result<O> + ::std::marker::Send,
            F1: ::std::ops::FnMut(DB::Row) -> ::sqlx::Result<O> + ::std::marker::Send,
        {
            /// See [`sqlx::query::Map::fetch`]
            pub fn fetch<'e, 'c: 'e, E>(
                self,
                executor: E,
            ) -> ::sqlx_conditional_queries::exports::BoxStream<'e, ::sqlx::Result<O>>
            where
                'q: 'e,
                E: 'e + ::sqlx::Executor<'c, Database = DB>,
                DB: 'e,
                O: 'e,
                F0: 'e,
                F1: 'e,
            {
                match self {
                    Self::Variant0(map) => map.fetch(executor),
                    Self::Variant1(map) => map.fetch(executor),
                }
            }
            /// See [`sqlx::query::Map::fetch_many`]
            #[deprecated = "Only the SQLite driver supports multiple statements in one prepared statement and that behavior is deprecated. Use `sqlx::raw_sql()` instead. See https://github.com/launchbadge/sqlx/issues/3108 for discussion."]
            pub fn fetch_many<'e, 'c: 'e, E>(
                mut self,
                executor: E,
            ) -> ::sqlx_conditional_queries::exports::BoxStream<
                'e,
                ::sqlx::Result<::sqlx::Either<DB::QueryResult, O>>,
            >
            where
                'q: 'e,
                E: 'e + ::sqlx::Executor<'c, Database = DB>,
                DB: 'e,
                O: 'e,
                F0: 'e,
                F1: 'e,
            {
                match self {
                    Self::Variant0(map) => #[allow(deprecated)] map.fetch_many(executor),
                    Self::Variant1(map) => #[allow(deprecated)] map.fetch_many(executor),
                }
            }
            /// See [`sqlx::query::Map::fetch_all`]
            pub async fn fetch_all<'e, 'c: 'e, E>(
                self,
                executor: E,
            ) -> ::sqlx::Result<::std::vec::Vec<O>>
            where
                'q: 'e,
                E: 'e + ::sqlx::Executor<'c, Database = DB>,
                DB: 'e,
                O: 'e,
                F0: 'e,
                F1: 'e,
            {
                match self {
                    Self::Variant0(map) => map.fetch_all(executor).await,
                    Self::Variant1(map) => map.fetch_all(executor).await,
                }
            }
            /// See [`sqlx::query::Map::fetch_one`]
            pub async fn fetch_one<'e, 'c: 'e, E>(self, executor: E) -> ::sqlx::Result<O>
            where
                'q: 'e,
                E: 'e + ::sqlx::Executor<'c, Database = DB>,
                DB: 'e,
                O: 'e,
                F0: 'e,
                F1: 'e,
            {
                match self {
                    Self::Variant0(map) => map.fetch_one(executor).await,
                    Self::Variant1(map) => map.fetch_one(executor).await,
                }
            }
            /// See [`sqlx::query::Map::fetch_optional`]
            pub async fn fetch_optional<'e, 'c: 'e, E>(
                self,
                executor: E,
            ) -> ::sqlx::Result<::std::option::Option<O>>
            where
                'q: 'e,
                E: 'e + ::sqlx::Executor<'c, Database = DB>,
                DB: 'e,
                O: 'e,
                F0: 'e,
                F1: 'e,
            {
                match self {
                    Self::Variant0(map) => map.fetch_optional(executor).await,
                    Self::Variant1(map) => map.fetch_optional(executor).await,
                }
            }
        }
        match ((),) {
            () => {
                ConditionalMap::Variant0(
                    ::sqlx::query_as!(
                        OutputType,
                        "\n            SELECT column\n            FROM table\n            WHERE created_at > "
                        + "$1" + "\n        ", created_at
                    ),
                )
            }
            ((),) => {
                ConditionalMap::Variant1(
                    ::sqlx::query_as!(
                        OutputType,
                        "\n            SELECT column\n            FROM table\n            WHERE created_at > "
                        + "$1" + "\n        ", created_at
                    ),
                )
            }
        }
    }
}
